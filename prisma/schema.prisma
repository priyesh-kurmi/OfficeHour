// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PARTNER
  BUSINESS_EXECUTIVE
  BUSINESS_CONSULTANT
  // Clients are not users of the platform
}

// Add these enum definitions
enum TaskStatus {
  pending
  in_progress
  review
  completed
  cancelled
}

enum TaskPriority {
  low
  medium
  high
}

enum BillingStatus {
  pending_billing
  billed
  paid
}

model User {
  id                      String         @id @default(uuid()) @db.Char(36)
  name                    String         @db.VarChar(50)  // 50 chars is enough for most names
  email                   String         @unique @db.VarChar(75)  // Most emails are under 75 chars
  phone                   String?        @db.VarChar(15)  // International format with country code
  password                String?        @db.VarChar(100) // Keep 100 for secure hashes
  passwordResetToken      String?        @db.VarChar(100)
  passwordResetTokenExpiry DateTime?     
  role                    UserRole       @default(BUSINESS_EXECUTIVE)
  avatar                  String?        @db.VarChar(150) // Reduce from 255
  isActive                Boolean        @default(true)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  updatedById             String?        // ID of the user who last updated this user
  roleVersion             Int            @default(1)
  // Relations
  // DEPRECATED: Legacy assignment field - use taskAssignments instead
  createdTasks            Task[]         @relation("AssignedByUser")
  // PRIMARY: Use this relation for all task assignments
  taskAssignments         TaskAssignee[] @relation("UserTaskAssignments")
  lastStatusUpdatedTasks  Task[]         @relation("LastStatusUpdater")
  messages                Message[]
  notificationsSent       Notification[] @relation("SentBy")
  notificationsReceived   Notification[] @relation("SentTo")
  activities              Activity[]
  managedClients          Client[]       // Staff who manages clients
  taskComments            TaskComment[]
  clientHistories         ClientHistory[] @relation("CreatedBy")
  canApproveBilling       Boolean        @default(false) // Whether this user can approve billing

  // For frequently accessed active users
  @@index([isActive], name: "active_users_idx")
}

model Client {
  id             String       @id @default(uuid()) @db.Char(36)
  contactPerson  String       @db.VarChar(50)   // 50 is sufficient for names
  companyName    String?      @db.VarChar(75)   // Reduced from 150
  email          String?      @db.VarChar(75)   // Reduced from 255
  phone          String?      @db.VarChar(15)   // International format
  address        String?      @db.VarChar(150)  // Reduced from 255
  notes          String?      @db.Text        // Keep as Text for longer content
  gstin          String?      @db.VarChar(15) // Standard GSTIN is 15 chars
  isGuest        Boolean      @default(false) // Whether this is a temporary guest client
  accessExpiry   DateTime?    // When guest client access expires
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  managerId      String       @db.Char(36) // The staff member who manages this client
  manager        User         @relation(fields: [managerId], references: [id])
  tasks          Task[]       // Tasks associated with this client
  attachments    Attachment[] // Attachments related to this client
  history        ClientHistory[] // Client history entries
  credentials    Credential[] //Credentials associated with this client
  
  @@index([managerId])
  @@index([contactPerson]) // Index for searching by contact person name
}

model Task {
  id             String    @id @default(uuid()) @db.Char(36)
  title          String    @db.VarChar(150) // Reduced from 255
  description    String?   @db.Text        // Keep as Text for longer content
  status         TaskStatus    @default(pending) // Changed from String
  priority       TaskPriority  @default(medium)  // Changed from String
  dueDate        DateTime?
  billingStatus  BillingStatus? @default(pending_billing) // Changed from String?
  billingDate    DateTime?
  scheduledDeletionDate DateTime? // Add this field

  // Add these new fields
  lastStatusUpdatedById String?   @db.Char(36)
  lastStatusUpdatedBy   User?     @relation("LastStatusUpdater", fields: [lastStatusUpdatedById], references: [id])
  lastStatusUpdatedAt   DateTime?
  
  // DEPRECATED: Legacy assignment fields - use assignees instead
  // These fields are kept for backward compatibility but should not be used for new code
  assignedById   String    @db.Char(36)
  assignedBy     User      @relation("AssignedByUser", fields: [assignedById], references: [id])
  
  // PRIMARY: Use this relation for all task assignments
  assignees      TaskAssignee[]
  
  // Keep other existing relations
  client         Client?   @relation(fields: [clientId], references: [id])
  clientId       String?   @db.Char(36)
  comments       TaskComment[]
  // Any other existing fields/relations
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // For overdue tasks - frequently queried
  @@index([status, dueDate(sort: Asc)], name: "overdue_tasks_idx")

  @@index([assignedById])
  @@index([clientId])
  @@index([billingStatus])
}

// New join table for many-to-many task assignments
model TaskAssignee {
  id          String    @id @default(uuid()) @db.Char(36)
  taskId      String    @db.Char(36)
  userId      String    @db.Char(36)
  assignedAt  DateTime  @default(now())
  
  // Relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation("UserTaskAssignments", fields: [userId], references: [id], onDelete: Cascade)
  
  // Unique constraint
  @@unique([taskId, userId])
}

model Attachment {
  id          String   @id @default(uuid()) @db.Char(36)
  filename    String   @db.VarChar(150) // Reduced from 255
  path        String   @db.VarChar(255) // Reduced from 512
  mimetype    String   @db.VarChar(50)  // Reduced from 100
  size        Int
  clientId    String?  @db.Char(36) // Optional relation to client
  client      Client?  @relation(fields: [clientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
}

model Message {
  id         String   @id @default(uuid()) @db.Char(36)
  content    String   @db.Text  // Keep as Text for longer content
  senderId   String   @db.Char(36)
  sender     User     @relation(fields: [senderId], references: [id])
  createdAt  DateTime @default(now())

  @@index([senderId])
}

model Notification {
  id          String   @id @default(uuid()) @db.Char(36)
  title       String   @db.VarChar(75) // Reduced from 100
  content     String?  @db.Text  // Keep as Text for longer content
  isRead      Boolean  @default(false)
  taskId      String?  @db.Char(36) // Optional relation to task
  
  // Who sent the notification
  sentById    String   @db.Char(36)
  sentBy      User     @relation("SentBy", fields: [sentById], references: [id])
  
  // Who received the notification
  sentToId    String   @db.Char(36)
  sentTo      User     @relation("SentTo", fields: [sentToId], references: [id])
  
  createdAt   DateTime @default(now())

  @@index([sentById])
  @@index([sentToId])
}

model Activity {
  id        String   @id @default(uuid()) @db.Char(36)
  type      String   // "client", "user", "task", "project", "document"
  action    String   // "created", "updated", "deleted", "assigned", "completed", "role_changed"
  target    String   // What was affected (name of client, user, task, etc.)
  details   Json?    // Additional context as JSON (optional)
  userId    String   @db.Char(36)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([type])
  @@index([userId])
  @@index([createdAt])
}

model TaskComment {
  id          String    @id @default(uuid()) @db.Char(36)
  content     String    @db.Text  // Keep as Text for longer content
  taskId      String    @db.Char(36)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String    @db.Char(36)
  user        User      @relation(fields: [userId], references: [id])
  attachments Json?     // Add this field to store attachment metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([taskId])
  @@index([userId])
}

model ClientHistory {
  id                String    @id @default(uuid()) @db.Char(36)
  clientId          String    @db.Char(36)
  client            Client    @relation(fields: [clientId], references: [id])
  content           String    @db.Text  // Keep as Text for longer content
  type              String    @default("general") @db.VarChar(50)
  createdAt         DateTime  @default(now())
  createdById       String    @db.Char(36)
  createdBy         User      @relation("CreatedBy", fields: [createdById], references: [id])
  pinned           Boolean   @default(false) // Whether this history entry is pinned for quick access
  
  // Task related fields
  taskId            String?   @db.Char(36)
  taskTitle         String?   @db.VarChar(255)
  taskDescription   String?   @db.Text  // Keep as Text for longer content
  taskStatus        String?   @db.VarChar(50)
  taskCompletedDate DateTime?
  taskBilledDate    DateTime?
  billingDetails    Json?

  @@index([clientId])
  @@index([createdById])
  @@index([taskId])
}

model Credential {
  id        String   @id @default(uuid()) @db.Char(36)
  title     String   @db.VarChar(75) // Reduced from 100
  username  String   @db.VarChar(75) // Reduced from 100
  password  String   @db.VarChar(100) // Keep 100 for secure hashes
  clientId  String   @db.Char(36)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}
